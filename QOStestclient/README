# QOS client by C++ Client SDK

## Introduction
This folder is QOS client by C++ Client SDK.
It provide two kinds of input format video encoded video and raw video.

- Supported Linux platform: >=Ubuntu 16.
- Supported MCU version: 4.2+.

##Prepare the development environment
Before you start, make sure you have following prerequisites installed/built:

- [Open WebRTC Toolkit Native SDK](https://github.com/open-webrtc-toolkit/owt-client-native/).
- [OpenSSL 1.1.0](https://www.openssl.org/source/).
- [Socket.IO C++ Client](https://github.com/socketio/socket.io-client-cpp/).

### How to build Open WebRTC Toolkit Native SDK
- python scripts/build_linux.py --gn_gen --sdk --arch x64 --ssl_root <openssl_path> --scheme release --output_path <output_path>

### How to build OpenSSL
- ./config shared -m64 --prefix=<openssl_path> --openssldir=<openssl_path>
- make
- make install

### How to build socket.io-client-cpp
- git clone --recurse-submodules https://github.com/socketio/socket.io-client-cpp.git
- cd socket.io-client-cpp/lib/websocketpp
- git pull origin master
- cd ../..
- mkdir build
- cmake -DBOOST_ROOT:STRING=<boost_path> -DSSL_ROOT:STRING=<openssl_path> ../
- make

## How to config
Configuration in config.json file.
`address` is the mcu server address.
`libsPath` is the third party lib path the program need to link.
`encode` set true will use encoded video file, set false will use raw video.

## How to build
1. cd scripts
2. ./build.sh

## How to run
1. Configure the config.json file
2. python runQosClient.py

## Result
All result will generated at "dataDir" in config.json , "../../analysis/native/Data" is default.
- localPublishTime.txt --sender or reference timestamp information for each frame
- localARGB.txt --each recevive side video frame ARGB data
- localLatency.txt --each recevive side video frame timestamp information
- localFps.txt --receive side fps information
- localBitrate.txt --receive side network consumption information

